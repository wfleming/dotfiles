#!/bin/sh
set -e

# Switch monitor hookup based on current hardware state
# Refs:
# * https://wiki.archlinux.org/index.php/Xrandr#Toggle_external_monitor
# * https://wiki.archlinux.org/index.php/Udev#Writing_udev_rules
# * https://wiki.archlinux.org/index.php/Acpid
#
# See system/etc/udev/rules.d & system/etc/acpi/events for usage

# set modes for specific screens to use instead of `auto`
mode_eDP1="--mode 1920x1080"

screen_mode () {
  vname="mode_$1"
  printf "%s\n" "${!vname:---auto}"
}

while getopts ":s:" opt; do
  case $opt in
    s)
      sleep "$OPTARG";;
    "?")
      printf "Invalid option -%s\n" "$OPTARG"
      exit 64;;
    ":")
      printf "Option -%s requires an argument\n" "$OPTARG"
      exit 64;;
  esac
done

command="xrandr"
intern="eDP1"
current_monitors=$(xrandr --listmonitors | tail --lines=+2 | grep -v "$intern" | sed -e "s/[ 0-9:+*]*\([a-zA-Z0-9]\+\).*/\1/")
connected_outputs=$(xrandr | grep -v "$intern" | grep " connected" | sed -e "s/\([a-zA-Z0-9]\+\) connected.*/\1/")
if ! grep --quiet open /proc/acpi/button/lid/*/state; then
  # if there are no external connected displays, just exit:
  # we could be putting the laptop to sleep
  if [ -z "$connected_outputs" ]; then
    exit
  fi
  command="$command --output $intern --off"
else
  command="$command --output $intern $(screen_mode "$intern")"
fi

# add each connected output
last_output=$intern
for output in $connected_outputs; do
  command="$command --output $output --right-of $last_output $(screen_mode "$output")"
  last_output=$output
done
# turn off any just-disconnected outputs
for output in $current_monitors; do
  if [[ "$command" != *"--output $output"* ]]; then
    command="$command --output $output --off"
  fi
done

printf "msu command=%s\n" "$command"
$command

printf "xrandr done. restarting polybar\n"
sleep 1
/home/will/.config/polybar/launch.sh

