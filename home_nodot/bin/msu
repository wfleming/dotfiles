#!/bin/sh
set -e

# Switch monitor hookup based on current hardware state
# Refs:
# * https://wiki.archlinux.org/index.php/Xrandr#Toggle_external_monitor
# * https://wiki.archlinux.org/index.php/Udev#Writing_udev_rules
# * https://wiki.archlinux.org/index.php/Acpid
#
# /etc/udev/rules.d/10-monitor.rules
# ACTION=="change", SUBSYSTEM=="drm", RUN+="/home/will/bin/runx /home/will/bin/msu -s 1 && /home/will/bin/runx /home/will/bin/wallpaper"
#
# /etc/acpi/handler.sh (add the following for open/close events
# /home/will/bin/runx /home/will/bin/msu
# /home/will/bin/runx /home/will/bin/wallpaper

while getopts ":s:" opt; do
  case $opt in
    s)
      sleep $OPTARG;;
    \?)
      printf "Invalid option -%s\n" $OPTARG
      exit 64;;
    \:)
      printf "Option -%s requires an argument\n" $OPTARG
      exit 64;;
  esac
done

command="xrandr"
intern="eDP1"
connected_outputs=$(xrandr | grep -v "$intern" | grep " connected" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")
if ! grep --quiet open /proc/acpi/button/lid/LID/state; then
  # if there are no external connected displays, just exit:
  # we could be putting the laptop to sleep
  if [ -z "$connected_outputs" ]; then
    exit
  fi
  command="$command --output $intern --off"
else
  command="$command --output $intern --auto"
fi


last_output=$intern
for output in $connected_outputs; do
  command="$command --output $output --right-of $last_output --auto"
  last_output=$output
done

$command
