[user]
	name = Will Fleming
	email = will@flemi.ng
[alias]
	o = checkout
	co = checkout
	c  = commit
	ci = commit
	d = diff
	st = status
	p = push
	br = branch
	amend = commit -C HEAD --amend
	caa = commit -a --amend -C HEAD
  fix = commit -a --fixup
  fix-rebase = rebase -i --autosquash origin/master
  pr-rebase = !git fetch && git rebase origin/master && git push --force
	unpushed-commits = !git-log origin/$(git branch 2>/dev/null | grep '^*' | colrm 1 2)..HEAD
	unmerged-commits = log --not HEAD
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
	# prune-local will delete local branches whose remote tracking was deleted. run `git remote prune origin` beforehand
	# http://stackoverflow.com/questions/13064613/git-how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore
	prune-local = "!git branch --merged master | grep -v 'master$' | xargs git branch -d"
	prune-all = "!git remote prune origin && git prune-local"
[color]
	diff = auto
	status = auto
	branch = auto
	ui = auto
[core]
	excludesfile = /Users/will/.gitignore
	editor = nvim
[diff]
  # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	algorithm = patience
[apply]
	whitespace = nowarn
[push]
  default = upstream
[github]
	user = wfleming
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
