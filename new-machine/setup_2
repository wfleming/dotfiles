#!/bin/sh
#
# Run setup first!
# You will be prompted to run this script later in the setup process after
# rebooting later in the setup process.
set -e

setup_base_dir=$(dirname $0)
. "${setup_base_dir}/setup_scripts/shared.sh"

check_internet

echo "== Continuing setup"

echo "==== AUR tools"
clone_and_install_aur_repo() {
  (
    cd $(mktemp --directory)
    git clone "https://aur.archlinux.org/$1.git" .
    makepkg --syncdeps --rmdeps --clean --install --noconfirm
  )
}
gpg --recv-keys DBE7D3DD8C81D58D0A13D0E76BC26A17B9B7018A # key for aurutils author
clone_and_install_aur_repo "aurutils"
clone_and_install_aur_repo "aurto"

echo "==== Install AUR packages"
echo "     You may see PGP failures: if you do, run gpg --recv-keys KEY_ID and re-run $0"
gpg --search-keys tux@spotify.com
gpg --search-keys linux@dropbox.com
gpg --search-keys aws-cli@amazon.com
# these steps fail inside the chroot during setup, so we needed to reboot
aur_packages="firefox-beta-bin firefox-tridactyl-native" # browsers
aur_packages="${aur_packages} aws-cli-v2-bin" # aws cli v2 (main repos are still v1)
aur_packages="${aur_packages} datagrip datagrip-jre" # jetbrains SQL IDE
aur_packages="${aur_packages} gifcast" # my script for gif desktop recordings
aur_packages="${aur_packages} nordvpn-bin" # vpn
aur_packages="${aur_packages} rbenv ruby-build" # ruby language management
aur_packages="${aur_packages} redshift-git" # rest my eyes
aur_packages="${aur_packages} slack-desktop" # the productivity abyss into which we all stare
aur_packages="${aur_packages} dropbox" # sync services
aur_packages="${aur_packages} spotify" # tunes
aur_packages="${aur_packages} tfenv" # manage terraform
aur_packages="${aur_packages} ttf-mac-fonts otf-san-francisco otf-san-francisco-mono" # fonts
aur_packages="${aur_packages} urlview" # for mutt with html emails
aur_packages="${aur_packages} polybar" # bar using with i3
aur_packages="${aur_packages} pulseaudio-modules-bt" # pulseaudio bluetooth codecs
aur_packages="${aur_packages} mates-git" # contact cli management
aur_packages="${aur_packages} zsh-pure-prompt" # a nice prompt
# aurto & aurutils get re-added here so they'll get upgraded naturally
aurto init
aurto add aurto aurutils ${aur_packages}
sudo pacman -S --noconfirm ${aur_packages}

# nordvpn authorizes via a group
sudo usermod --append --groups nordvpn "$(whoami)"

# official zoom package has some benefits over the aur package, but I'll need to
# regularly re-fetch to upgrade
echo "==== Install zoom"
curl --output /tmp/zoom.pkg.tar.xz --location https://zoom.us/client/latest/zoom_x86_64.pkg.tar.xz
aurto addpkg /tmp/zoom.pkg.tar.xz
sudo pacman -S --noconfirm zoom # the other abyss into which we all stare

echo "==== Install custom pkgbuilds"
(
  cd ~/src
  git clone "${extra_pkgbuilds_url}" pkgbuilds
  cd ~/src/pkgbuilds/msmtp-oauth2
  makepkg --syncdeps --rmdeps --clean --install --noconfirm
)

if grep System76 /sys/devices/virtual/dmi/id/sys_vendor; then
  echo "==== Install System760-specific AUR packages"
  pkgs="system76-dkms system76-io-dkms system76-acpi-dkms system76-firmware-daemon system76-power"
  aurto add ${pkgs}
  pacman -S --noconfirm ${pkgs}
  sudo systemctl enable system76 system76-power
fi

echo "==== enabling systemd units"
sudo systemctl enable \
  acpid \
  bluetooth \
  docker \
  systemd-network \
  iwd \
  systemd-resolved \
  nordvpnd \
  ntpd \
  pac-gen-mirrorlist.timer \
  mnt-mother-data.automount
systemctl --user enable \
  ssh-agent \
  imap-sync.timer \
  contacts-sync.timer \
  backup.timer

echo "== cleanup"
sudo rm -r /installer

echo "== Setup complete!"
echo "==== You can shutdown and reboot into your installed system when ready."
echo "==== You still need to do the following manually:"
printf "\t- import gpg keychain (documented in keys dir)\n"
printf "\t- configure dropbox (configure in GUI)\n"
printf "\t- configure intellij/datagrip (vim plugin, font prefs)\n"
printf "\t- setup pulse effects equalizer\n"
printf "\t- run 'vdirsyncer discover fastmail_contacts' to prep contact syncing\n"
printf "\t- test gpg-agent/ssh, test imap-sync systemd unit\n"
printf "\t- re-clone work git repos, copy over env for those\n"
